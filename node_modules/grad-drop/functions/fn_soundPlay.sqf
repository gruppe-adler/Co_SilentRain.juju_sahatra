params ["_plane", "_sound"];

// only delete sound on last step while pushing it 3000m away
// code by commy2
if (_sound == "end") exitWith {
	

	{
		private _soundSource = _x;

		private _distance = 3000;
		private _speed0 = 50;
		private _speed1 = 50;

		private _duration = 2*_distance/(_speed1 + _speed0);

		private _time0 = time;
		private _time1 = _time0 + _duration;
		private _acceleration = -2 * (_distance/_duration^2);

		private _pos0 = getPosASL _soundSource;
		private _pos1 = _pos0 vectorAdd (vectorDir _plane vectorMultiply _distance);
		private _vDir = vectorDir _plane;
		private _vUp = vectorUp _plane;

		[{
			(_this select 0) params ["_soundSource", "_pos0", "_pos1", "_vDir", "_vUp", "_distance", "_speed0", "_duration", "_time0", "_time1", "_acceleration"];

			private _time = linearConversion [_time0, _time1, time, 0, _duration, true];
			private _velocity = _vDir vectorMultiply (_acceleration * _time + _speed0);

			private _position = (_acceleration/2 * _time + _speed0) * _time;
			private _interval = linearConversion [0, _distance, _position, 0, 1];

			_soundSource setVelocityTransformation [_pos0, _pos1, _velocity, _velocity, _vDir, _vDir, _vUp, _vUp, _interval];

			if (_time >= _time1) exitWith {
				(_this select 1) call CBA_fnc_removePerFrameHandler;
				deleteVehicle _soundSource;
			};
		}, 0, [_soundSource, _pos0, _pos1, _vDir, _vUp, _distance, _speed0, _duration, _time0, _time1, _acceleration]] call CBA_fnc_addPerFrameHandler;
	} forEach _previousSources;
};


// clean existing sounds
private _previousSources = _plane getVariable ["grad_drop_soundSources", []];
private _previousDummies = _plane getVariable ["grad_drop_soundDummys", []];
{
	if (!isNull _x) then {
		deleteVehicle _x;
		deleteVehicle (_previousDummies#_foreachindex);
	};
} forEach _previousSources;


// hardcoded on estimated engine position of plane
private _soundDummyLeftPos = [-5,1.6,-1.2];
private _soundDummyRightPos = [5,1.6,-1.2];

// soundsource cannot be attached
private _soundDummyLeft = createSimpleObject ["Sign_Sphere10cm_F", [0,0,0], true];
private _soundDummyRight = createSimpleObject ["Sign_Sphere10cm_F", [0,0,0], true];
_soundDummyLeft setObjectTexture [0, "#(rgb,8,8,3)color(0,0,0,0)"];
_soundDummyRight setObjectTexture [0, "#(rgb,8,8,3)color(0,0,0,0)"];

private _soundDummies = [_soundDummyLeft,_soundDummyRight];
_plane setVariable ["grad_drop_soundDummys", _soundDummies];

// systemchat _sound;


private _soundSourceLeft = createSoundSource [_sound, (_plane modelToWorld _soundDummyLeftPos), [], 0];
private _soundSourceRight = createSoundSource [_sound,  (_plane modelToWorld _soundDummyRightPos), [], 0];

private _soundSources = [_soundSourceLeft, _soundSourceRight];
_plane setVariable ["grad_drop_soundSources", _soundSources, true];


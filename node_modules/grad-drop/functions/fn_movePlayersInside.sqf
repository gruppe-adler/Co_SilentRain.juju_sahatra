params ["_planeInBase", "_waitBeforeJump", "_onSceneCut", "_onLanding", "_giveParachute"];

private _delay = 1;
private _attachHelper = _planeInBase getVariable ["grad_drop_attachHelper", objNull];
private _planeInSky = _planeInBase getVariable ["grad_drop_planeInSky", objNull];
private _triggerPlane = _planeInBase getVariable ["grad_drop_cargoTrigger", objNull];

// iterate players and move everyone into the corresponding plane in the sky
{
    private _unit = _x;
    private _isInPlane = _unit inArea _triggerPlane; // call grad_drop_fnc_getPositionInsidePlane; // [0.99707,-2.46436,-4.52348]

    if (_isInPlane) then {
            private _relDir = _unit getRelDir _attachHelper;
            // private _positionInPlane = _unit worldToModel ASLToAGL getPosASL _triggerPlane;
            [_unit, _attachHelper] call BIS_fnc_attachToRelative;; // prevents movement and prepares for transfer
            _unit setVariable ["grad_drop_relDir", _relDir, true];

            if (!isNil "grad_drop_debug") then {
                private _debugMarker = "VR_3DSelector_01_default_F" createVehicleLocal [0,0,0];
                _debugMarker setPos getPos _unit;
            };

            // move in players server side
            [{
                params ["_triggerPlane", "_planeInSky", "_unit", "_giveParachute", "_onSceneCut", "_delay"];
                [_unit, _planeInSky, _giveParachute, _onSceneCut, _delay+1] remoteExec ["grad_drop_fnc_moveInRemote", _unit];

            }, [_triggerPlane, _planeInSky, _unit, _giveParachute, _onSceneCut, _delay], _delay+1] call CBA_fnc_waitAndExecute;
        };

} forEach (playableUnits + switchableUnits); // support for editor + AI tests


// _triggerPlane attachTo [_planeInSky, [0,0,-.3]];
_attachHelper setPos (_planeInSky modelToWorld [0,-0.5,-0.3]);// [-0.0581055,0.08965,-3.75892]];               

[{
        params ["_attachHelper", "_planeInSky"];
        private _y = (getDir _planeInSky) + 260; private _p = 0; private _r = 0; 
        _attachHelper setVectorDirAndUp [ 
            [sin _y * cos _p, cos _y * cos _p, sin _p], 
            ([[sin _r, -sin _p, cos _r * cos _p], -_y] call BIS_fnc_rotateVector2D)
    ];

}, [_attachHelper, _planeInSky], _delay] call CBA_fnc_waitAndExecute;

/*
[["RHS_C130J",[["EmptyDetectorArea10x10",[0.0910645,2.46191,-3.62839],[[-0.952978,0.302979,0.00606005],[0,-0.0199975,0.9998]]]]]]
*/
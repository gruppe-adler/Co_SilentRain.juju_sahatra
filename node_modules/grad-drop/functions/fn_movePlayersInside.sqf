params ["_plane", "_waitBeforeJump", "_onSceneCut", "_onLanding", "_giveParachute"];

grad_drop_fnc_getPositionInsidePlane = {
    params ["_plane", "_unit"];

    private _boundingbox = 0 boundingBoxReal _plane; 
    _boundingbox params ["_mins", "_maxs", "_radius"];

    _mins params ["_minX", "_minY", "_minZ"];
    _maxs params ["_maxX", "_maxY", "_maxZ"];

    private _maxWidth = abs ((_maxX) - (_minX));
    private _maxLength = abs ((_maxY) - (_minY));
    private _maxHeight = abs ((_maxZ) - (_minZ));

    private _isInside = _unit inArea [_plane, _maxWidth/2, maxLength/2, getDir _plane, true, _maxHeight/2];
    private _return = [0,0,0];

    if (_isInside) then {
        _return = (_plane worldToModelVisual ASLToAGL (getPosWorld _unit));
    };

    _return
};

// iterate players and move everyone into the corresponding plane in the sky
{
    private _unit = _x;
    private _positionInPlane = [_plane, _unit] call grad_drop_fnc_getPositionInsidePlane;
    private _planeInSky = _plane getVariable ["grad_drop_planeInSky", objNull];

    if (_positionInPlane isNotEqualTo [0,0,0]) then {

        // cut sequence players locally
        private _delay = 6;
        [_unit, _delay, _onSceneCut] remoteExec ["grad_drop_fnc_moveInPlaneCut",0,false];

        // move in players server side
        [{
            params ["_planeInSky", "_positionInPlane", "_unit", "_giveParachute"];
            [_planeInSky, _positionInPlane, _unit, _giveParachute] call grad_drop_fnc_moveInPlaneNew;
         }, [_planeInSky, _positionInPlane, _unit, _giveParachute], _delay] call CBA_fnc_waitAndExecute;
    };

} forEach (playableUnits + switchableUnits); // support for editor + AI tests

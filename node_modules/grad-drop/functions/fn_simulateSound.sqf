params ["_plane", ["_fadeOut", false]];



private _soundDummyLeftPos = [-5,1.6,-1.2];
private _soundDummyRightPos = [5,1.6,-1.2];

private _soundDummyLeft = _plane getVariable ["grad_drop_soundDummyLeft", objNull];
private _soundDummyRight = _plane getVariable ["grad_drop_soundDummyRight", objNull];

private _isInPlane = !(player getVariable ["GRAD_drop_dropstart", false]);

// fade in sound by descending from heaven
if (isNull _soundDummyLeft) then {
	_soundDummyLeft = createSimpleObject ["Sign_Sphere10cm_F", [0,0,0], true];
	_soundDummyRight = createSimpleObject ["Sign_Sphere10cm_F", [0,0,0], true];
	_soundDummyLeft setObjectTexture [0, "#(rgb,8,8,3)color(0,0,0,0)"];
	_soundDummyRight setObjectTexture [0, "#(rgb,8,8,3)color(0,0,0,0)"];
	_plane setVariable ["grad_drop_soundDummyLeft", _soundDummyLeft];
	_plane setVariable ["grad_drop_soundDummyRight", _soundDummyRight];

	[_soundDummyLeft, _soundDummyLeftPos, _plane] spawn {
		params ["_soundDummyLeft", "_soundDummyLeftPos", "_plane"];

		for "_i" from 200 to 1 step -1 do { 
			_soundDummyLeftPos params ["_offsetX", "_offsetY", "_offsetZ"];
			private _relPos = _plane modelToWorld [_offsetX, _offsetY, _offsetZ*_i];
			_soundDummyLeft setPos _relPos;
			sleep 0.05;
		};
	};

	[_soundDummyRight, _soundDummyRightPos, _plane] spawn {
		params ["_soundDummyRight", "_soundDummyRightPos", "_plane"];

		for "_i" from 200 to 1 step -1 do { 
			_soundDummyRightPos params ["_offsetX", "_offsetY", "_offsetZ"];
			private _relPos = _plane modelToWorld [_offsetX, _offsetY, _offsetZ*_i];
			_soundDummyRight setPos _relPos;
			sleep 0.05;
		};
	};
};

// fadeout sound by moving along Y axis
if (!_isInPlane) then {

	[_soundDummyLeft, _plane] spawn {
		params ["_soundDummyLeft", "_plane"];

		for "_i" from 1 to 1000 step -1 do { 
			_soundDummyLeftPos params ["_offsetX", "_offsetY", "_offsetZ"];
			private _relPos = _plane modelToWorld [_offsetX, _offsetY*_i, _offsetZ];
			_soundDummyLeft setPos _relPos;
			sleep 0.01;
		};
	};

	[_soundDummyRight, _plane] spawn {
		params ["_soundDummyRight", "_plane"];

		for "_i" from 1 to 1000 step -1 do { 
			_soundDummyRightPos params ["_offsetX", "_offsetY", "_offsetZ"];
			private _relPos = _plane modelToWorld [_offsetX, _offsetY*_i, _offsetZ];
			_soundDummyRight setPos _relPos;
			sleep 0.01;
		};
	};
};



// defines situation drop is in (set by server)
private _dropState = missionNamespace getVariable ["grad_drop_dropState", -1];
if (_dropState > 4) exitWith {};

private _sound = "c130_sound_int_forsage";

if (_isInPlane) then {
	switch (_dropState) do {
		case 1: { _sound = "c130_sound_int_forsage"; };
		case 2: { _sound = "c130_sound_int_low"; };
		case 3: { _sound = "c130_sound_int_hi"; };
		case 4: { _sound = "c130_sound_ext_hi"; };
		default { _sound = "c130_sound_int_forsage"; };
	};
} else {
	switch (_dropState) do {
		case 1: { _sound = "c130_sound_ext_forsage"; };
		case 2: { _sound = "c130_sound_ext_low"; };
		case 3: { _sound = "c130_sound_ext_hi"; };
		case 4: { _sound = "c130_sound_ext_hi"; };
		default { _sound = "c130_sound_int_forsage"; };
	};
};

private _soundObjectLeft = _soundDummyLeft say3d _sound;
private _soundObjectRight = _soundDummyRight say3d _sound;

[{
	params ["_soundObjectLeft", "_plane"];
	isNull _soundObjectLeft 
},{
	params ["_soundObjectLeft", "_plane"];
	[_plane] call grad_drop_fnc_simulateSound;
},[_soundObjectLeft, _plane]] call CBA_fnc_waitUntilAndExecute;

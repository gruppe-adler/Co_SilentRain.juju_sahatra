#include "..\component.hpp"

if (!isServer) exitWith {_this remoteExec ["grad_drop_fnc_initHalojump",2,false]};

private _planesPrepared = missionNameSpace getVariable ["GRAD_drop_planesPrepared", []];
missionNamespace setVariable ["grad_drop_dropState", 0, true];


// spawn static planes to prepare them in position
{
	_x params ["_planeInBase", "_marker", "_height", "_waitBeforeJump", "_giveParachute"];

	private _triggerPlaneBase = "EmptyDetector" createVehicle [0,0,0];
	_triggerPlaneBase setPos (_planeInBase modelToWorld [0,0,-3.4]); // manually reverse engineered offset
	_triggerPlaneBase setTriggerArea [3, 12, getDir _planeInBase, true, 3];
	_planeInBase setVariable ["grad_drop_cargoTrigger", _triggerPlaneBase, true];

	private _attachHelper = "Sign_Sphere10cm_F" createVehicle [0,0,0];
	_attachHelper setObjectTextureGlobal [0, "#(rgb,8,8,3)color(0,0,0,0)"];
	_attachHelper setPos (_planeInBase modelToWorld [0,0,0]);
	_planeInBase setVariable ["grad_drop_attachHelper", _attachHelper, true];

	private _dir = markerDir _marker;
	private _position = getMarkerPos _marker;
	private _planeInSky = [_position, _dir, _height] call grad_drop_fnc_spawnPlane;

	// store mirror object
	_planeInBase setVariable ["grad_drop_planeInSky", _planeInSky, true];
	_planeInSky setVariable ["grad_drop_planeInBase", _planeInBase, true];

	private _jm = [_planeInBase, true] call grad_drop_fnc_spawnJumpmaster;
	_planeInBase setVariable ["grad_drop_jumpmaster", _jm, true];

} forEach _planesPrepared;

INFO("%1 planes created for HALO jump.", count _planesPrepared);
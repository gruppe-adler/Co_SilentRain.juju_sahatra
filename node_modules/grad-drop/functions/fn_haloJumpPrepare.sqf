#include "..\component.hpp"

if (!isServer) exitWith {_this remoteExec ["grad_drop_fnc_initHalojump",2,false]};

private _planesPrepared = missionNameSpace getVariable ["GRAD_drop_planesPrepared", []];

// spawn static planes to prepare them in position
{
	_x params ["_planeInBase", "_marker", "_height", "_waitBeforeJump", "_giveParachute", "_onSceneCut", "_onLanding"];

	private _triggerPlaneBase = "EmptyDetector" createVehicle [0,0,0];
	_triggerPlaneBase setPos (_planeInBase modelToWorld [-0.0581055,-3.08965,-3.45892]); // manually reverse engineered offset
	_triggerPlaneBase setTriggerArea [1.5, 5.8, getDir _planeInBase, true, 1.5];
	_planeInBase setVariable ["grad_drop_cargoTrigger", _triggerPlaneBase, true];

	private _attachHelper = "Sign_Sphere10cm_F" createVehicle [0,0,0];
	_attachHelper setPos (_planeInBase modelToWorld [0,0,0]);
	_planeInBase setVariable ["grad_drop_attachHelper", _attachHelper, true];

	if (!isNil "grad_drop_debug") then {
			private _debugMarkerMap = createMarkerLocal [format ["mrk_debug_trigger_%1", position _triggerPlaneBase], getPos _triggerPlaneBase]; 
			_debugMarkerMap setMarkerSizeLocal [1.5, 5.8];
			_debugMarkerMap setMarkerDirLocal getDir _planeInBase;
			_debugMarkerMap setMarkerShapeLocal "RECTANGLE";
			_debugMarkerMap setMarkerColorLocal "ColorRed";
			_debugMarkerMap setMarkerAlphaLocal 0.5;

            private _debugMarker = "VR_3DSelector_01_default_F" createVehicleLocal [0,0,0];
            _debugMarker setPos getPos _triggerPlaneBase;
    };

	private _dir = markerDir _marker;
	private _position = getMarkerPos _marker;
	private _planeInSky = [_position, _dir, _height] call grad_drop_fnc_spawnPlane;

	// store mirror object
	_planeInBase setVariable ["grad_drop_planeInSky", _planeInSky, true];
	_planeInSky setVariable ["grad_drop_planeInBase", _planeInBase, true];

} forEach _planesPrepared;

INFO("%1 planes created for HALO jump.", count _planesPrepared);